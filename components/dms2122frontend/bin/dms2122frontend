#!/usr/bin/env python3

from flask import Flask, g, request
import inspect
import os
from typing import Dict
from flask.globals import session
from flask.helpers import url_for
from flask.templating import render_template
from flask.wrappers import Request

from werkzeug.utils import redirect
import dms2122frontend
from dms2122frontend.data.config import FrontendConfiguration
from dms2122frontend.data.rest import AuthService, BackendService
from dms2122frontend import g
from dms2122frontend.presentation.web import (
    AdminEndpoints,
    CommonEndpoints,
    SessionEndpoints,
    StudentEndpoints,
    TeacherEndpoints,
)

cfg: FrontendConfiguration = FrontendConfiguration()
cfg.load_from_file(cfg.default_config_file())
auth_service_cfg: Dict = cfg.get_auth_service()
auth_service: AuthService = AuthService(
    auth_service_cfg["host"],
    auth_service_cfg["port"],
    apikey_header="X-ApiKey-Auth",
    apikey_secret=auth_service_cfg["apikey_secret"],
)
backend_service_cfg: Dict = cfg.get_backend_service()
backend_service: BackendService = BackendService(
    backend_service_cfg["host"],
    backend_service_cfg["port"],
    apikey_header="X-ApiKey-Backend",
    apikey_secret=backend_service_cfg["apikey_secret"],
)

g.set_backend_service(backend_service)

app = Flask(
    __name__,
    static_folder=os.path.dirname(inspect.getfile(dms2122frontend)) + "/static",
    template_folder=os.path.dirname(inspect.getfile(dms2122frontend)) + "/templates",
)
app.secret_key = bytes(cfg.get_app_secret_key(), "ascii")


@app.errorhandler(404)
def error404(error):
    print(error)
    return render_template("404.html"), 404


@app.route("/login", methods=["GET"])
def get_login():
    return SessionEndpoints.get_login(auth_service)


@app.route("/login", methods=["POST"])
def post_login():
    return SessionEndpoints.post_login(auth_service)


@app.route("/logout", methods=["GET"])
def get_logout():
    return SessionEndpoints.get_logout()


@app.route("/home", methods=["GET"])
def get_home():
    return CommonEndpoints.get_home(auth_service)


@app.route("/student", methods=["GET"])
def get_student():
    return StudentEndpoints.get_student(auth_service)


@app.route("/student/answered", methods=["GET"])
def get_student_answered():
    return StudentEndpoints.get_student_answered(auth_service)


@app.route("/student/answered", methods=["POST"])
def post_student_answers():
    return StudentEndpoints.post_student_answers(auth_service)


@app.route("/student/iterator", methods=["POST"])
def post_student_iterator():
    return StudentEndpoints.post_student_iterator(auth_service)


@app.route("/student/iterator/<it>", methods=["GET", "POST"])
def post_student_iterator_value(it: str):
    try:
        return StudentEndpoints.get_student_iterator(auth_service, int(it))
    except ValueError:
        print("Invalid iterator value: " + it)
        return redirect(url_for("get_home"))


@app.route("/student/iterator/submit", methods=["POST"])
def post_student_iterator_submit():
    return StudentEndpoints.post_student_iterator_submit(auth_service)


@app.route("/teacher", methods=["GET", "POST"])
def get_teacher():
    return TeacherEndpoints.get_post_teacher(auth_service)


@app.route("/teacher/stats", methods=["GET", "POST"])
def get_users_stats():
    return TeacherEndpoints.get_user_stats(auth_service)


@app.route("/teacher/new", methods=["GET, POST"])
def get_post_new_question():
    return TeacherEndpoints.get_post_new_question(auth_service)


@app.route("/teacher/answers", methods=["GET", "POST"])
def post_new_question_create():
    return TeacherEndpoints.get_post_answers_question(auth_service)


@app.route("/teacher/preview", methods=["GET", "POST"])
def post_new_question_preview():
    return TeacherEndpoints.get_post_preview_question(auth_service)


@app.route("/teacher/question/preview", methods=["GET"])
def get_question_student_preview():
    q_id = request.args.get("id", default=0, type=int)
    return TeacherEndpoints.get_preview_student_question(auth_service, q_id)


@app.route("/teacher/confirm", methods=["GET", "POST"])
def post_new_question_confirm():
    return TeacherEndpoints.get_post_confirm_question(auth_service)


@app.route("/teacher/edit", methods=["GET"])
def get_edit_question():
    return TeacherEndpoints.get_edit_question(auth_service)


@app.route("/teacher/edit", methods=["POST"])
def post_edit_question():
    return TeacherEndpoints.post_edit_question(auth_service)


@app.route("/", methods=["GET"])
def index():
    return CommonEndpoints.get_home(auth_service)


@app.route("/admin", methods=["GET"])
def get_admin():
    return AdminEndpoints.get_admin(auth_service)


@app.route("/admin/users", methods=["GET"])
def get_admin_users():
    return AdminEndpoints.get_admin_users(auth_service)


@app.route("/admin/users/new", methods=["GET"])
def get_admin_users_new():
    return AdminEndpoints.get_admin_users_new(auth_service)


@app.route("/admin/users/new", methods=["POST"])
def post_admin_users_new():
    return AdminEndpoints.post_admin_users_new(auth_service)


@app.route("/admin/users/edit", methods=["GET"])
def get_admin_users_edit():
    return AdminEndpoints.get_admin_users_edit(auth_service)


@app.route("/admin/users/edit", methods=["POST"])
def post_admin_users_edit():
    return AdminEndpoints.post_admin_users_edit(auth_service)


@app.context_processor
def inject_stage_and_region():

    name = session.get("user")
    roles = session.get("roles")
    return {
        "authors": "Jorge Ruiz G칩mez, Iv치n Ruiz G치zquez & Pablo Sim칩n Sainz",
        "name": name or "Anon",
        "roles": roles or [],
    }


if __name__ == "__main__":

    os.environ["FLASK_ENV"] = "development"
    app.jinja_env.auto_reload = True
    app.config["TEMPLATES_AUTO_RELOAD"] = True
    app.run(
        host=cfg.get_service_host(),
        port=cfg.get_service_port(),
        debug=True,
        use_reloader=True,
    )
